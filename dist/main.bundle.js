!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.webStorage=t():e.webStorage=t()}(window,(function(){return function(e){var t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(o,n,function(t){return e[t]}.bind(null,n));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SessionStorage=t.WebStorage=void 0;var o,n=r(1);!function(e){e.Local="local",e.Session="session"}(o||(o={}));var i=function(){function e(e){var t,r,n,i=e||{};i.prefix=null!==(t=i.prefix)&&void 0!==t?t:"__storage_",i.type=null!==(r=i.type)&&void 0!==r?r:o.Session,i.expire=null!==(n=i.expire)&&void 0!==n?n:0,this.config=i,this.prefix=i.prefix,this.expire=i.expire,this.storage=i.type===o.Local?window.localStorage:window.sessionStorage}return e.prototype.setItem=function(e,t,r){var o=this;return new Promise((function(n){n(o.setItemSync(e,t,r))}))},e.prototype.setItemSync=function(e,t,r){if(!e||!t)throw Error('need "key" and "value" arguments');try{var o=this.getStorage(r),i=r&&r.expire||this.expire,u={exp:n.default.formatTime(i),v:t};return o.setItem(""+this.prefix+e,JSON.stringify(u)),!0}catch(e){return console.error("setItem fail, error message: ",e.message),!1}},e.prototype.getItem=function(e,t,r){var o=this;return new Promise((function(n){n(o.getItemSync(e,t,r))}))},e.prototype.getItemSync=function(e,t,r){var o,n=this;if(!e)throw Error('need "key" argument');t=t||null;var i=""+this.prefix+e;try{var u=this.getStorage(r),a=Date.now(),s=u.getItem(i)||"",c=JSON.parse(s),f=void 0;return c.exp&&c.exp>a?f=null!==(o=c.v)&&void 0!==o?o:t:(f=t,setTimeout((function(){n.removeItem(e)}))),f}catch(e){return console.error("getItem fail, error message: ",e.message),t}},e.prototype.removeItem=function(e){var t=this;return new Promise((function(r){r(t.removeItemSync(e))}))},e.prototype.removeItemSync=function(e,t){if(!e)throw Error('need "key" argument');var r=""+this.prefix+e;try{return this.getStorage(t).removeItem(r),!0}catch(e){return console.error("removeItem fail, error message: ",e.message),!1}},e.prototype.clear=function(e){var t=this;return new Promise((function(r){r(t.clearSync(e))}))},e.prototype.clearSync=function(e){var t=this.getStorage(e);try{return t.clear(),!0}catch(e){return console.error("clear fail, error message: ",e.message),!1}},e.prototype.getStorage=function(e){var t=this.storage;return e&&e.type&&(t=e.type===o.Local?window.localStorage:window.sessionStorage),t},e}();t.WebStorage=i,t.SessionStorage=new i},function(e,t,r){"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Day="d",e.Hour="h",e.Minute="m",e.Second="s"}(o||(o={}));var n=function(){function e(){}return e.formatTime=function(t){var r,o=/(\d+)([dhms]{1,1})/i;if("string"==typeof t&&o.test(t)){var n=Date.now(),i=t.trim().toLowerCase().match(o);r=n+e.getUnitTime(i&&i[2])*Number(i&&i[1]||1)}else r="string"==typeof t?new Date(t).getTime():"number"==typeof t?t:t.getTime();return r},e.getUnitTime=function(t){switch(t){case o.Day:return e.DAY;case o.Hour:return e.HOUR;case o.Minute:return e.MINUTE;default:return e.SENCOND}},e}();t.default=n}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,